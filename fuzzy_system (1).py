# -*- coding: utf-8 -*-
"""Fuzzy System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OZk5gdoSr63mfUxiZ9zsHNLuf3Eet38b
"""

!pip install scikit-fuzzy==0.4.2

import numpy as np
import skfuzzy as fuzz
import matplotlib.pyplot as plt

import numpy as np
import matplotlib.pyplot as plt
import skfuzzy as fuzz

# Function to plot membership functions
def plot_membership(x, memberships, labels, title):
    plt.figure(figsize=(10, 6))
    for membership, label in zip(memberships, labels):
        plt.plot(x, membership, label=label)
    plt.title(title)
    plt.xlabel('Value')
    plt.ylabel('Membership Degree')
    plt.legend(loc='best')
    plt.grid(True)
    plt.show()

# Age membership functions
age = np.arange(32, 71, 1)
age_low = fuzz.trimf(age, [32, 32, 45])
age_moderate = fuzz.trimf(age, [40, 45, 55])
age_high = fuzz.trimf(age, [50, 55, 70])
age_extremely_high = fuzz.trimf(age, [65, 70, 70])

plot_membership(age, [age_low, age_moderate, age_high, age_extremely_high],
                ['Low', 'Moderate', 'High', 'Extremely High'],
                'Age Membership Functions')

# Cigarettes per day membership functions
cigs = np.arange(0, 71, 1)
cigs_low = fuzz.trimf(cigs, [0, 0, 10])
cigs_moderate = fuzz.trimf(cigs, [11, 20, 30])
cigs_high = fuzz.trimf(cigs, [21, 50, 70])

plot_membership(cigs, [cigs_low, cigs_moderate, cigs_high],
                ['Low', 'Moderate', 'High'],
                'Cigarettes Per Day Membership Functions')

# Systolic blood pressure membership functions
sysBP = np.arange(83.5, 296, 1)
sysBP_low = fuzz.trimf(sysBP, [83.5, 83.5, 120])
sysBP_moderate = fuzz.trimf(sysBP, [121, 140, 160])
sysBP_high = fuzz.trimf(sysBP, [141, 180, 295])
sysBP_extremely_high = fuzz.trimf(sysBP, [181, 200, 295])

plot_membership(sysBP, [sysBP_low, sysBP_moderate, sysBP_high, sysBP_extremely_high],
                ['Low', 'Moderate', 'High', 'Extremely High'],
                'Systolic Blood Pressure Membership Functions')

# Total cholesterol membership functions
cholesterol = np.arange(107, 697, 1)
cholesterol_low = fuzz.trimf(cholesterol, [107, 107, 200])
cholesterol_moderate = fuzz.trimf(cholesterol, [200, 220, 239])
cholesterol_high = fuzz.trimf(cholesterol, [240, 696, 696])

plot_membership(cholesterol, [cholesterol_low, cholesterol_moderate, cholesterol_high],
                ['Low', 'Moderate', 'High'],
                'Total Cholesterol Membership Functions')

# BMI membership functions
bmi = np.arange(15.96, 57, 1)
bmi_low = fuzz.trimf(bmi, [15.96, 15.96, 25])
bmi_moderate = fuzz.trimf(bmi, [25.1, 30, 35])
bmi_high = fuzz.trimf(bmi, [30.1, 35, 56])
bmi_extremely_high = fuzz.trimf(bmi, [40, 45, 56])

plot_membership(bmi, [bmi_low, bmi_moderate, bmi_high, bmi_extremely_high],
                ['Low', 'Moderate', 'High', 'Extremely High'],
                'BMI Membership Functions')

"""**Analysis**"""

import numpy as np
import skfuzzy as fuzz
import skfuzzy.control as ctrl
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

import os
import pandas as pd
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Define the dataset file path
file_path = r"/content/fuzzy risk factors dataset.csv"

# Verify if the file exists
if not os.path.exists(file_path):
    raise FileNotFoundError(f"The file was not found at the specified path: {file_path}")

# Load the dataset
data = pd.read_csv(file_path)

# Check for missing values
missing_values = data.isnull().sum()
print("Missing values found in the following columns:")
print(missing_values)

# Handle missing values (imputation)
data['cigsPerDay'].fillna(data['cigsPerDay'].mean(), inplace=True)
data['totChol'].fillna(data['totChol'].median(), inplace=True)
data['BMI'].fillna(data['BMI'].mean(), inplace=True)
data['age'].fillna(data['age'].mean(), inplace=True)
data['sysBP'].fillna(data['sysBP'].mean(), inplace=True)

# Check how many rows are left after handling missing values
print(f"Data loaded. Number of rows after handling missing values: {len(data)}")

# Define the fuzzy variables
cigs_per_day = ctrl.Antecedent(np.arange(0, 101, 1), 'cigsPerDay')
tot_chol = ctrl.Antecedent(np.arange(107, 301, 1), 'totChol')
bmi = ctrl.Antecedent(np.arange(15.96, 57, 1), 'BMI')
age = ctrl.Antecedent(np.arange(32, 71, 1), 'age')
sysBP = ctrl.Antecedent(np.arange(83.5, 296, 1), 'sysBP')
susceptibility = ctrl.Consequent(np.arange(0, 101, 1), 'susceptibility')

# Define fuzzy membership functions
cigs_per_day['low'] = fuzz.trimf(cigs_per_day.universe, [0, 0, 10])
cigs_per_day['moderate'] = fuzz.trimf(cigs_per_day.universe, [11, 20, 30])
cigs_per_day['high'] = fuzz.trimf(cigs_per_day.universe, [21, 50, 70])

tot_chol['low'] = fuzz.trimf(tot_chol.universe, [107, 107, 200])
tot_chol['moderate'] = fuzz.trimf(tot_chol.universe, [200, 220, 239])
tot_chol['high'] = fuzz.trimf(tot_chol.universe, [240, 300, 300])

bmi['low'] = fuzz.trimf(bmi.universe, [15.96, 15.96, 25])
bmi['moderate'] = fuzz.trimf(bmi.universe, [25.1, 30, 35])
bmi['high'] = fuzz.trimf(bmi.universe, [30.1, 35, 56])
bmi['extremely_high'] = fuzz.trimf(bmi.universe, [40, 45, 56])

age['low'] = fuzz.trimf(age.universe, [32, 32, 45])
age['moderate'] = fuzz.trimf(age.universe, [40, 45, 55])
age['high'] = fuzz.trimf(age.universe, [50, 55, 70])
age['extremely_high'] = fuzz.trimf(age.universe, [65, 70, 70])

sysBP['low'] = fuzz.trimf(sysBP.universe, [83.5, 83.5, 120])
sysBP['moderate'] = fuzz.trimf(sysBP.universe, [121, 140, 160])
sysBP['high'] = fuzz.trimf(sysBP.universe, [141, 180, 295])
sysBP['extremely_high'] = fuzz.trimf(sysBP.universe, [181, 200, 295])

susceptibility['low'] = fuzz.trimf(susceptibility.universe, [0, 0, 50])
susceptibility['moderate'] = fuzz.trimf(susceptibility.universe, [25, 50, 75])
susceptibility['high'] = fuzz.trimf(susceptibility.universe, [50, 100, 100])

# Define fuzzy rules
rule1 = ctrl.Rule(cigs_per_day['low'] & tot_chol['low'] & bmi['low'] & age['low'] & sysBP['low'], susceptibility['low'])
rule2 = ctrl.Rule(cigs_per_day['moderate'] & tot_chol['moderate'] & bmi['moderate'] & age['moderate'] & sysBP['moderate'], susceptibility['moderate'])
rule3 = ctrl.Rule(cigs_per_day['high'] & tot_chol['high'] & bmi['high'] & age['high'] & sysBP['high'], susceptibility['high'])
rule4 = ctrl.Rule(cigs_per_day['low'] &  tot_chol['moderate'] & bmi['moderate'] & age['low'] & sysBP['moderate'] , susceptibility['low'])
rule5 = ctrl.Rule(age['extremely_high'] & cigs_per_day['high'] &  sysBP['high'] & tot_chol['high'] & bmi['high'], susceptibility['high'])
rule6 = ctrl.Rule(age['high'] & cigs_per_day['moderate'] & sysBP['low'] & tot_chol['low'] & bmi['low'], susceptibility['moderate'])
rule7 = ctrl.Rule(age['moderate'] & cigs_per_day['high'] & sysBP['moderate'] & tot_chol['high'] & bmi['moderate'], susceptibility['high'])


# Create the control system
susceptibility_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7])
susceptibility_sim = ctrl.ControlSystemSimulation(susceptibility_ctrl)

# Initialize a list to hold predictions
predictions = []

# Process records
for index, row in data.iterrows():
    try:
        susceptibility_sim.input['cigsPerDay'] = row['cigsPerDay']
        susceptibility_sim.input['totChol'] = row['totChol']
        susceptibility_sim.input['BMI'] = row['BMI']
        susceptibility_sim.input['age'] = row['age']
        susceptibility_sim.input['sysBP'] = row['sysBP']

        susceptibility_sim.compute()
        susceptibility_value = susceptibility_sim.output['susceptibility']
        predictions.append(susceptibility_value)

    except Exception as e:
        print(f"Error processing record {index + 1}: {e}")
        predictions.append(None)

data['Predicted Susceptibility'] = predictions

# Save predictions to an Excel file
output_path = r'/content/fuzzy risk factors dataset.xlsx'
data.to_excel(output_path, index=False)

import pandas as pd
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

# Load the dataset
file_path = r"/content/testing csv.csv"
data = pd.read_csv(file_path)

# Preprocessing: Handle missing values
data['cigsPerDay'] = data['cigsPerDay'].fillna(data['cigsPerDay'].mean())
data['totChol'] = data['totChol'].fillna(data['totChol'].median())
data['BMI'] = data['BMI'].fillna(data['BMI'].mean())
data['age'] = data['age'].fillna(data['age'].mean())
data['sysBP'] = data['sysBP'].fillna(data['sysBP'].mean())

# Define the features and target variable for Decision Tree
features = ['age', 'cigsPerDay', 'totChol', 'BMI', 'sysBP']
target = 'TenYearCHD'

X = data[features]
y = data[target]

# Split the data for training
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Decision Tree model
decision_tree_model = DecisionTreeClassifier(random_state=42)
decision_tree_model.fit(X_train, y_train)

# Predict probabilities for the entire dataset
data['Decision_Tree_Probability'] = decision_tree_model.predict_proba(X)[:, 1]

# Define fuzzy variables
decision_tree_output = ctrl.Antecedent(np.arange(0, 1.01, 0.01), 'decision_tree_output')
age = ctrl.Antecedent(np.arange(32, 71, 1), 'age')
cigs_per_day = ctrl.Antecedent(np.arange(0, 101, 1), 'cigsPerDay')
tot_chol = ctrl.Antecedent(np.arange(107, 301, 1), 'totChol')
bmi = ctrl.Antecedent(np.arange(15.96, 57, 1), 'BMI')
sysBP = ctrl.Antecedent(np.arange(83.5, 296, 1), 'sysBP')
stroke_risk = ctrl.Consequent(np.arange(0, 1.01, 0.01), 'stroke_risk')

# Define membership functions
decision_tree_output['low'] = fuzz.trimf(decision_tree_output.universe, [0, 0, 0.3])
decision_tree_output['moderate'] = fuzz.trimf(decision_tree_output.universe, [0.3, 0.5, 0.7])
decision_tree_output['high'] = fuzz.trimf(decision_tree_output.universe, [0.7, 1, 1])

age['low'] = fuzz.trimf(age.universe, [32, 32, 45])
age['moderate'] = fuzz.trimf(age.universe, [40, 45, 55])
age['high'] = fuzz.trimf(age.universe, [50, 55, 70])

cigs_per_day['low'] = fuzz.trimf(cigs_per_day.universe, [0, 0, 10])
cigs_per_day['moderate'] = fuzz.trimf(cigs_per_day.universe, [11, 20, 30])
cigs_per_day['high'] = fuzz.trimf(cigs_per_day.universe, [21, 50, 70])

tot_chol['low'] = fuzz.trimf(tot_chol.universe, [107, 107, 200])
tot_chol['moderate'] = fuzz.trimf(tot_chol.universe, [200, 220, 239])
tot_chol['high'] = fuzz.trimf(tot_chol.universe, [240, 300, 300])

bmi['low'] = fuzz.trimf(bmi.universe, [15.96, 15.96, 25])
bmi['moderate'] = fuzz.trimf(bmi.universe, [25.1, 30, 35])
bmi['high'] = fuzz.trimf(bmi.universe, [30.1, 35, 56])

sysBP['low'] = fuzz.trimf(sysBP.universe, [83.5, 83.5, 120])
sysBP['moderate'] = fuzz.trimf(sysBP.universe, [121, 140, 160])
sysBP['high'] = fuzz.trimf(sysBP.universe, [141, 180, 295])

stroke_risk['low'] = fuzz.trimf(stroke_risk.universe, [0, 0.25, 0.5])
stroke_risk['moderate'] = fuzz.trimf(stroke_risk.universe, [0.4, 0.6, 0.8])
stroke_risk['high'] = fuzz.trimf(stroke_risk.universe, [0.7, 0.9, 1])

# Define fuzzy rules
rule1 = ctrl.Rule(decision_tree_output['low'] & age['low'] & cigs_per_day['low'] & tot_chol['low'] & bmi['low'] & sysBP['low'], stroke_risk['low'])
rule2 = ctrl.Rule(decision_tree_output['moderate'] & age['moderate'] & cigs_per_day['moderate'] & tot_chol['moderate'] & bmi['moderate'] & sysBP['moderate'], stroke_risk['moderate'])
rule3 = ctrl.Rule(decision_tree_output['high'] & age['high'] & cigs_per_day['high'] & tot_chol['high'] & bmi['high'] & sysBP['high'], stroke_risk['high'])

# Create the control system
stroke_risk_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
stroke_risk_sim = ctrl.ControlSystemSimulation(stroke_risk_ctrl)

# Apply the hybrid model
predicted_stroke_risks = []
for index, row in data.iterrows():
    stroke_risk_sim.input['decision_tree_output'] = row['Decision_Tree_Probability']
    stroke_risk_sim.input['age'] = row['age']
    stroke_risk_sim.input['cigsPerDay'] = row['cigsPerDay']
    stroke_risk_sim.input['totChol'] = row['totChol']
    stroke_risk_sim.input['BMI'] = row['BMI']
    stroke_risk_sim.input['sysBP'] = row['sysBP']

    try:
        stroke_risk_sim.compute()
        predicted_stroke_risks.append(stroke_risk_sim.output['stroke_risk'])
    except ValueError:
        predicted_stroke_risks.append(0)  # Assign a default value for sparse cases

data['Hybrid_Stroke_Risk'] = predicted_stroke_risks

# Save the results to Excel
output_path = r'/content/testing_decision_tree.xlsx'
data.to_excel(output_path, index=False)

print("Hybrid model predictions (Decision Tree) saved successfully.")

import pandas as pd
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

# Load the dataset
file_path = r"/content/testing csv.csv"
data = pd.read_csv(file_path)

# Preprocessing: Handle missing values
data['cigsPerDay'] = data['cigsPerDay'].fillna(data['cigsPerDay'].mean())
data['totChol'] = data['totChol'].fillna(data['totChol'].median())
data['BMI'] = data['BMI'].fillna(data['BMI'].mean())
data['age'] = data['age'].fillna(data['age'].mean())
data['sysBP'] = data['sysBP'].fillna(data['sysBP'].mean())

# Define the features and target variable for Logistic Regression
features = ['age', 'cigsPerDay', 'totChol', 'BMI', 'sysBP']
target = 'TenYearCHD'

X = data[features]
y = data[target]

# Split the data for Logistic Regression
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Logistic Regression model
decision_tree_model = DecisionTreeClassifier(random_state=42)
decision_tree_model.fit(X_train, y_train)

# Predict probabilities for test data
data['Decision_Tree_Probability'] = decision_tree_model.predict_proba(X)[:, 1]

# Define fuzzy variables
decision_tree_output = ctrl.Antecedent(np.arange(0, 1.01, 0.01), 'decision_tree_output')
age = ctrl.Antecedent(np.arange(32, 71, 1), 'age')
cigs_per_day = ctrl.Antecedent(np.arange(0, 101, 1), 'cigsPerDay')
tot_chol = ctrl.Antecedent(np.arange(107, 301, 1), 'totChol')
bmi = ctrl.Antecedent(np.arange(15.96, 57, 1), 'BMI')
sysBP = ctrl.Antecedent(np.arange(83.5, 296, 1), 'sysBP')
stroke_risk = ctrl.Consequent(np.arange(0, 1.01, 0.01), 'stroke_risk')

# Define membership functions
decision_tree_output['low'] = fuzz.trimf(decision_tree_output.universe, [0, 0, 0.3])
decision_tree_output['moderate'] = fuzz.trimf(decision_tree_output.universe, [0.3, 0.5, 0.7])
decision_tree_output['high'] = fuzz.trimf(decision_tree_output.universe, [0.7, 1, 1])

age['low'] = fuzz.trimf(age.universe, [32, 32, 45])
age['moderate'] = fuzz.trimf(age.universe, [40, 45, 55])
age['high'] = fuzz.trimf(age.universe, [50, 55, 70])

cigs_per_day['low'] = fuzz.trimf(cigs_per_day.universe, [0, 0, 10])
cigs_per_day['moderate'] = fuzz.trimf(cigs_per_day.universe, [11, 20, 30])
cigs_per_day['high'] = fuzz.trimf(cigs_per_day.universe, [21, 50, 70])

tot_chol['low'] = fuzz.trimf(tot_chol.universe, [107, 107, 200])
tot_chol['moderate'] = fuzz.trimf(tot_chol.universe, [200, 220, 239])
tot_chol['high'] = fuzz.trimf(tot_chol.universe, [240, 300, 300])

bmi['low'] = fuzz.trimf(bmi.universe, [15.96, 15.96, 25])
bmi['moderate'] = fuzz.trimf(bmi.universe, [25.1, 30, 35])
bmi['high'] = fuzz.trimf(bmi.universe, [30.1, 35, 56])

sysBP['low'] = fuzz.trimf(sysBP.universe, [83.5, 83.5, 120])
sysBP['moderate'] = fuzz.trimf(sysBP.universe, [121, 140, 160])
sysBP['high'] = fuzz.trimf(sysBP.universe, [141, 180, 295])

stroke_risk['low'] = fuzz.trimf(stroke_risk.universe, [0, 0.25, 0.5])
stroke_risk['moderate'] = fuzz.trimf(stroke_risk.universe, [0.4, 0.6, 0.8])
stroke_risk['high'] = fuzz.trimf(stroke_risk.universe, [0.7, 0.9, 1])

# Define fuzzy rules
rule1 = ctrl.Rule(decision_tree_output['low'] & age['low'] & cigs_per_day['low'] & tot_chol['low'] & bmi['low'] & sysBP['low'], stroke_risk['low'])
rule2 = ctrl.Rule(decision_tree_output['moderate'] & age['moderate'] & cigs_per_day['moderate'] & tot_chol['moderate'] & bmi['moderate'] & sysBP['moderate'], stroke_risk['moderate'])
rule3 = ctrl.Rule(decision_tree_output['high'] & age['high'] & cigs_per_day['high'] & tot_chol['high'] & bmi['high'] & sysBP['high'], stroke_risk['high'])


rule_default = ctrl.Rule(decision_tree_output['low'], stroke_risk['low'])

# Create the control system
stroke_risk_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule_default])
stroke_risk_sim = ctrl.ControlSystemSimulation(stroke_risk_ctrl)


# Apply the hybrid model
predicted_stroke_risks = []
for index, row in data.iterrows():
    stroke_risk_sim.input['decision_tree_output'] = row['Decision_Tree_Probability']
    stroke_risk_sim.input['age'] = row['age']
    stroke_risk_sim.input['cigsPerDay'] = row['cigsPerDay']
    stroke_risk_sim.input['totChol'] = row['totChol']
    stroke_risk_sim.input['BMI'] = row['BMI']
    stroke_risk_sim.input['sysBP'] = row['sysBP']

    try:
        stroke_risk_sim.compute()
        predicted_stroke_risks.append(stroke_risk_sim.output['stroke_risk'])
    except ValueError:
        predicted_stroke_risks.append(0)  # Assign a default value for sparse cases

data['Hybrid_Stroke_Risk'] = predicted_stroke_risks

# Save the results to Excel
output_path = r'/content/testing.xlsx'
data.to_excel(output_path, index=False)

print("Hybrid model predictions saved successfully.")

import numpy as np
import skfuzzy as fuzz
import skfuzzy.control as ctrl
import pandas as pd
import os
import matplotlib.pyplot as plt

# Provide the path to the Excel file manually
excel_file_path = input("/content/fuzzy risk factors dataset.csv")

if excel_file_path and os.path.exists(excel_file_path):
    print(f"File exists: {excel_file_path}")
    # Load the Excel file
    df = pd.read_excel(excel_file_path)
    print(f"Data loaded. Number of rows: {len(df)}")

    # Define fuzzy variables
    age = ctrl.Antecedent(np.arange(32, 71, 1), 'age')
    cigs_per_day = ctrl.Antecedent(np.arange(0, 101, 1), 'cigsPerDay')
    tot_chol = ctrl.Antecedent(np.arange(107, 301, 1), 'totChol')
    bmi = ctrl.Antecedent(np.arange(15.96, 57, 1), 'BMI')
    sysBP = ctrl.Antecedent(np.arange(83.5, 296, 1), 'sysBP')
    stroke_risk = ctrl.Consequent(np.arange(0, 1.01, 0.01), 'stroke_risk')

    age['low'] = fuzz.trimf(age.universe, [32, 32, 45])
    age['moderate'] = fuzz.trimf(age.universe, [40, 45, 55])
    age['high'] = fuzz.trimf(age.universe, [50, 55, 70])

    cigs_per_day['low'] = fuzz.trimf(cigs_per_day.universe, [0, 0, 10])
    cigs_per_day['moderate'] = fuzz.trimf(cigs_per_day.universe, [11, 20, 30])
    cigs_per_day['high'] = fuzz.trimf(cigs_per_day.universe, [21, 50, 70])

    tot_chol['low'] = fuzz.trimf(tot_chol.universe, [107, 107, 200])
    tot_chol['moderate'] = fuzz.trimf(tot_chol.universe, [200, 220, 239])
    tot_chol['high'] = fuzz.trimf(tot_chol.universe, [240, 300, 300])

    bmi['low'] = fuzz.trimf(bmi.universe, [15.96, 15.96, 25])
    bmi['moderate'] = fuzz.trimf(bmi.universe, [25.1, 30, 35])
    bmi['high'] = fuzz.trimf(bmi.universe, [30.1, 35, 56])

    sysBP['low'] = fuzz.trimf(sysBP.universe, [83.5, 83.5, 120])
    sysBP['moderate'] = fuzz.trimf(sysBP.universe, [121, 140, 160])
    sysBP['high'] = fuzz.trimf(sysBP.universe, [141, 180, 295])

    stroke_risk['low'] = fuzz.trimf(stroke_risk.universe, [0, 0.25, 0.5])
    stroke_risk['moderate'] = fuzz.trimf(stroke_risk.universe, [0.4, 0.6, 0.8])
    stroke_risk['high'] = fuzz.trimf(stroke_risk.universe, [0.7, 0.9, 1])

    # Define fuzzy rules
    rule1 = ctrl.Rule(cigs_per_day['low'] & tot_chol['low'] & bmi['low'] & age['low'] & sysBP['low'], stroke_risk['low'])
    rule2 = ctrl.Rule(cigs_per_day['moderate'] & tot_chol['moderate'] & bmi['moderate'] & age['moderate'] & sysBP['moderate'], stroke_risk['moderate'])
    rule3 = ctrl.Rule(cigs_per_day['high'] & tot_chol['high'] & bmi['high'] & age['high'] & sysBP['high'], stroke_risk['high'])

    # Control System
    susceptibility_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
    susceptibility_simulation = ctrl.ControlSystemSimulation(susceptibility_ctrl)

    # Lists to store actual and predicted values
    actual_values = []
    predicted_values = []

    # Evaluating the Fuzzy Model for the Excel data
    for index, row in df.iterrows():
        try:
            susceptibility_simulation.input['age'] = row['age']
            susceptibility_simulation.input['cigsPerDay'] = row['cigsPerDay']
            susceptibility_simulation.input['totChol'] = row['totChol']
            susceptibility_simulation.input['BMI'] = row['BMI']
            susceptibility_simulation.input['sysBP'] = row['sysBP']

            # Perform defuzzification
            susceptibility_simulation.compute()

            # Store the predicted and actual values
            predicted_values.append(susceptibility_simulation.output['stroke_risk'])
            actual_values.append(row.get('Heart stroke or not', 'N/A'))  # Replace with the actual column name

            # Print predicted result
            print(f"Record {index + 1}: Predicted stroke susceptibility: {susceptibility_simulation.output['stroke_risk']}, Actual: {row.get('Heart stroke or not', 'N/A')}")
        except Exception as e:
            print(f"Error processing record {index + 1}: {e}")

    # Saving results back to Excel
    df['Predicted susceptibility'] = predicted_values
    df.to_excel('updated_heart_stroke_predictions.xlsx', index=False)
    print("Updated predictions saved to 'updated_heart_stroke_predictions.xlsx'.")

    # Plotting Actual vs Predicted scatter plot
    plt.figure(figsize=(8, 6))
    plt.scatter(actual_values, predicted_values, color='b', alpha=0.6, label='Data points')
    plt.plot([0, 1], [0, 1], color='r', linestyle='--', label='Perfect Prediction Line')

    plt.title('Actual vs Predicted Stroke Susceptibility')
    plt.xlabel('Actual Susceptibility')
    plt.ylabel('Predicted Susceptibility')
    plt.legend()
    plt.grid(True)
    plt.show()

else:
    print("Invalid file path or file does not exist.")